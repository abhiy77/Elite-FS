/* 06/04/2020 - HOME
 * Sansa has an array. She wants to find the value obtained by XOR-ing the contiguous subarrays, 
followed by XOR-ing the values thus obtained. Determine this value.

For example, if arr=[3,4,5]:

Subarray	Operation			Result
--------------------------------------
3			None				3
4			None				4
5			None				5
3,4			3 XOR 4				7
4,5			4 XOR 5				1
3,4,5		3 XOR 4 XOR 5		2

Now we take the resultant values and XOR them together:
3 XOR 4 XOR 5 XOR 7 XOR 1 XOR 2 = 6

Input Format
- The first line contains an integer n, the number of elements in .
- The second line of each test case contains n space-separated integers .

Output Format
Print the results of each test case on a separate line.

Sample Input-1
    3
    1 2 3
Sample Output-1
    2

Sample Input-2
    4
    4 5 7 5
Sample Output-2
    0


======== Testcases Program-1 ========= 
case =1
input =3
98 74 12
output =110

case =2
input =3
50 13 2
output =48

case =3
input =3
1 2 3
output =2

case =4
input =4
4 5 7 5
output =0

case =5
input =99
89569312 21866299 20236377 28203907 81596929 6321355 87016881 50994671 52489039 23357185 59410214 21083149 34060565 4921675 86959263 93867885 83516506 64646854 80639093 95122806 30128395 217526 78646061 70074088 12770250 6156161 56341645 16142423 34591122 69992915 90850243 24160434 91859215 63602972 52364341 25972496 22440680 39381222 29483519 74929719 62738408 41410085 96012868 96798973 46331761 35488484 43183210 29848267 52651690 76338655 24971073 35296438 29072534 56133486 5370526 94359136 62289648 14228523 10501559 96880770 84221438 53868154 21041204 28597005 17471127 25921898 54569501 39911807 65303120 36569372 67357878 80557880 77979458 63370747 29873205 76827571 51375583 73056415 6675838 4027273 1911423 84163264 39323711 30983957 92813102 97210589 25343093 55102750 11439112 88361004 4499872 48176903 42229159 78057429 76773908 12216638 3979327 83859762 4644797
output =76463609

case =6
input =87

output =119845220

case =7
input =93

output =20157817

case =8
input =87
87770949 3539968 85857360 77246456 83451983 45194015 36963334 34136171 11561830 437931 12439210 12956041 86914849 22161159 61379835 37500998 43069365 23353098 26855068 87487243 71441629 9861116 76591632 45613849 75542899 21244556 53247162 11794559 3535351 92436858 44756139 43822653 48493178 30613499 21069109 84461513 75807514 58032443 18597685 39885696 58470374 83553247 52841737 97901576 58230758 66737925 87918926 53816476 90091023 14773994 93820071 14049005 77151463 22928055 59662854 5210714 44172611 65426368 69521626 224315 10379578 14277765 44046968 58872757 44891264 65116077 43334270 73215130 75664872 14448307 13100826 34135246 50517907 65942564 84553174 8748665 85196841 72472100 15081493 75287864 39762447 8901565 41853221 16913910 31829620 1516075 74640976
output =134209269

 */
package Elite;
import java.util.*;
public class XorAllSubArrays {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		sc.nextLine();
		int[] nums = Arrays.asList(sc.nextLine().split(" ")).stream().mapToInt(Integer::parseInt).toArray();
		int result = nums[0];
		for(int i=1;i<nums.length;i++) {
			result ^= nums[i];
		}
		
		for(int i=0;i<nums.length;i++) {
			int l = 2;
			while(i+l <= nums.length) {
				int temp = nums[i];
				System.out.print(nums[i]+" ");
				for(int j=i+1;j<i+l;j++) {
					temp ^= nums[j];
					System.out.print(nums[j] + " ");
				}
				System.out.println();
				l++;
				result ^= temp;
			}
		}			
		System.out.println(result);
	}
}