/* 14/05/2020 - HOME
You are given the grayscale image of a biopsy of a patient, 
you are also given the grayscale pattern of a potential malignant tumour. 
You have to print whether the patient has cancer or not.

Input Format:
    - The first line contains two space-separated integers R and C, 
      indicating the number of rows and columns in the biopsy image. 
    - This is followed by R lines, each with a string of C digits 
      representing the gray scale intensities of the biopsy image.
    - The following line contains two space-separated integers, r and c, 
      indicating the number of rows and columns in the tumor image .
    - This is followed by r lines, each with a string of c digits 
      representing the gray scale intensities of the tumous image. 

Output Format:
    - Print "YES",if patient has cancer
      otherwise, "NO"

Sample Input:
4 4
5424
2459
3341
2644
2 2
34
64
Sample Output: 
YES


********Testcases*********
case =1
input =10 10
7283455864
6731158619
8988242643
3830589324
2229505813
5633845374
6473530293
7053106601
0834282956
4607924137
3 4
9505
3845
3530
output ="YES"

case =2
input =15 15
400453592126560
114213133098692
474386082879648
522356951189169
887109450487496
252802633388782
502771484966748
075975207693780
511799789562806
404007454272504
549043809916080
962410809534811
445893523733475
768705303214174
650629270887160
2 2
99
99
output ="NO"

case =3
input =5 10
1234567890  
0987654321  
1357924680  
2486013579  
1324576890
3 5
87654
57924
86013
output ="YES"

case =4
input =5 5
12345
12345
12345
12345
12345
2 2
23
24
output ="NO"

case =5
input =4 4
5424
2459
3341
2644
2 2
34
64
output ="YES"

case =6
input =20 20
34889246430321978567
58957542800420926643
35502505614464308821
14858224623252492823
72509980920257761017
22842014894387119401
01112950562348692493
16417403478999610594
79426411112116726706
65175742483779283052
89078730337964397201
13765228547239925167
26113704444636815161
25993216162800952044
88796416233981756034
14416627212117283516
15248825304941012863
88460496662793369385
59727291023618867708
19755940017808628326
7 4
1641
7942
6517
8907
1376
2691
2599
output ="NO"

case =7
input =25 25
7652157548860692421022503
9283597467877865303553675
4160389485250089289309493
2583470721457150497569300
3220130778636571709490905
3588873017660047694725749
9288991387848870159567061
4840101673383478700737237
8430916536880190158229898
8986106490042260460547150
2591460395957631878779378
1816190871689680423501920
0704047294563387014281341
8544774664056811258209321
9609294756392563447060526
0170173859593369054590795
6088985673796975810221577
7738800757919472437622349
5474120045253009653348388
3930491401877849249410013
1486477041403746396925337
2955579022827592919878713
2625547961868100985291514
3673299809851325174555652
4533398973801647859680907
5 4
5250
1457
8636
7660
7848
output ="YES"

case =8
input =50 40
9983169417733456678970335234458861338187
4822639434858594596668554093519576972901
0261505143959826639109857563873974241570
5960034929541636049734444668069948268930
8734848925587536295169939976571127205155
6119006812881980753576192426789183788426
4773892089198768915240612272571732021445
0779499278072192795161843588969396035205
9194890286304727980896899562577542775105
4128177012018283857410014533805139206041
2923755024370169986404626918329217280670
4645220073881584212174616975451400402119
7264782803443400944518858786587099555763
2437179766495305589576868769763886267175
2897157097930561697568826806480799716644
4598836536820474355332438341611326547993
1920212261272692629188559770563793105156
0899409853516586441538869232679950376065
9400012059189521968474525935666000993795
1199175976099431844642501449510651508485
6834418557356028549376050625619947045634
4436029406086333962698757636692404183694
3965439450347811010902016795450611733556
7602257482822381543298773231134473449199
2404251877560954900703922873816593996325
1247577519978950618567796287592255335049
2098878324995927990204465012532049278205
4643134382092434663051535181090301957738
7258763267421349819676493115284568374289
7955088210930449207068942369177021087606
2907836444144772512046038284253335628212
2868369277313076591185711537674448524633
0140783125546175896766904491064489284179
2810736151680491819461826695285216364116
0538587324192700225608981611479822713883
3333840687302227926035122214801387782330
2256431853816100771458569901015318916700
3474950405636550544196455074367440325453
8548022446307246006691277934467150961192
5033348376539220657980884930760477705680
1935815944020027531734735229870766953085
5486879622820594313234499784112558521138
7634849181611751206465536935816726861292
9218586723766436610965518507090061860436
7590471400415560201122670937630581216433
6453862774841873238378614607328249119788
7813355824846535790232886632199688805918
4164567766944059334110949471417807267239
3677544564835716108820700982391119405489
4473441492566249445952268814652460194672
22 17
37550243701699864
52200738815842121
47828034434009445
71797664953055895
71570979305616975
88365368204743553
02122612726926291
94098535165864415
00120591895219684
91759760994318446
44185573560285493
60294060863339626
54394503478110109
22574828223815432
42518775609549007
75775199789506185
88783249959279902
31343820924346630
87632674213498196
50882109304492070
78364441447725720
83692773130765977
output ="NO"

*/
package Elite;
import java.util.*;

public class CancerOrNoCancer {
  public static void main(String[] args) {
    Scanner cin = new Scanner(System.in);
    
      int R = cin.nextInt();
      int C = cin.nextInt();
      cin.nextLine(); //Skip end-of-line character to get to the grid
      
      String[] grid = new String[R];
      for (int i = 0; i < R; i++)
        grid[i] = cin.nextLine();
      
      int r = cin.nextInt();
      int c = cin.nextInt();
      cin.nextLine();
      String[] subgrid = new String[r];
      for (int i = 0; i < r; i++)
        subgrid[i] = cin.nextLine();
      
      boolean found = false;
      for (int i = 0; !found && i < R-r + 1; i++) { //iterates over "top rows" for the subgrid.
        for (int j = 0; !found && j < C-c + 1; j++) { //iterates over "left-cols" for the subgrid.
         // System.err.println("Now checking "+ grid[i].substring(j, j+c));
          if (subgrid[0].equals(grid[i].substring(j, j+c))) { //We've found a first row!  so, let's check all the rows below
            System.err.println("We found a substring at row=" + i + ", col=" + j);
            found = true;
            for (int k = i+1; found && k < r + i; k++) {
              System.err.println("  The substring = " + grid[k].substring(j, j+c));
              found &= subgrid[k-i].equals(grid[k].substring(j, j+c));
            }
          }
        }
      }
      
      System.out.println(found ? "YES" : "NO");
  }
}